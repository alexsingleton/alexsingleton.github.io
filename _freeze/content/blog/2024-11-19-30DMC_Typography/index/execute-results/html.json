{
  "hash": "d9fae37c74daf00c83dbb8ff825f1183",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"30 Day Map Challenge: Typography\"\ndate: \"2024-11-19\"\ncategories: [Maps]\nimage: \"D19.png\"\nexecute:\n  echo: true\n  message: false\n  warning: false\n---\n\n\n\n# Day 18: Typography\n\nThis map uses the location of postcodes in the UK, and produces a map where the \"Postcode Area\" (the first letters of a postcode) are scaled by the number of unit postcodes contained within them. The map is created from the mean locations of Unit Postcdoes within each Postcode Area. A [Dorling Cartogram](https://datavizcatalogue.com/blog/chart-snapshot-dorling-cartograms/) is then used to adjust these locations and generate circles which are then used to scale the labels for the plot.\n\nThe postcode files used for this map were extracted from the Ordnance Survey [Codepoint](https://osdatahub.os.uk/downloads/open/CodePointOpen) as CSV. They are extracted to a folder and then DuckDB was used to read this collection of multiple CSV into a single data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(magrittr)\nlibrary(sf)\nlibrary(cartogram)\n\n# Connect to an in memort DuckDB database\ncon <- dbConnect(duckdb::duckdb(), dbdir = \":memory:\")\n\n# Set the path to the directory containing CSV files\ndirectory_path <- \"CSV\"\n\n# Register CSV files in the directory as a virtual DuckDB table\ndbExecute(con, paste0(\"CREATE VIEW all_data AS SELECT * FROM read_csv_auto('\", directory_path, \"/*.csv')\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Query the combined data and store it as a tibble\ncodepoint <- dbGetQuery(con, \"SELECT * FROM all_data\") %>%\n  as_tibble()\n\n# Disconnect from the database\ndbDisconnect(con, shutdown = TRUE)\n```\n:::\n\n\n\nAfter importing the data, we then adjust the column names.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Renaming columns in all_data\ncodepoint <- codepoint %>%\n  rename(\n    Postcode = column0,\n    Positional_quality_indicator = column1,\n    Eastings = column2,\n    Northings = column3,\n    Country_code = column4,\n    NHS_regional_HA_code = column5,\n    NHS_HA_code = column6,\n    Admin_county_code = column7,\n    Admin_district_code = column8,\n    Admin_ward_code = column9\n  )\n```\n:::\n\n\n\nAnd then create a new variable name for postcode areas. In many cases this is the first two letters of the unit postcode, however, in some places, only the first letter, requiring removal of a number.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodepoint %<>%\n    mutate(pcd_area = str_sub(Postcode, 1, 2) %>% str_remove(\"\\\\d\"))\n```\n:::\n\n\n\nNext we create a new data frame which is calculated as the average Easting and Northing location for each postcode area, and additionally counting the number of postcodes. We can use simple arithmetic calculation as Easting and Northings are a symmetrical and in units of meters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcd_area <- codepoint %>%\n  group_by(pcd_area) %>%\n  summarise(\n    avg_easting = mean(Eastings, na.rm = TRUE),\n    avg_northing = mean(Northings, na.rm = TRUE),\n    record_count = n()\n  )\n```\n:::\n\n\n\nThe data frame is then converted into into an SF object with a CRS of 27700 which is OSGB, however is then transformed into a geographic co-ordinate system 3857, which is Mercator, enabling subsequent processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to sf object\nsf_pcd_area <- pcd_area %>%\n  st_as_sf(coords = c(\"avg_easting\", \"avg_northing\"), crs = 27700) %>%\n  st_transform(3857)\n```\n:::\n\n\n\nThe Dorling Cartogram can be found within the Catogram package. In this instance it creates a new set of circular geometry for each of the Postcode Areas. The area of these new shapes are then captured as a list and converted into quintiles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the Dorling Cartogram\ndorling_cartogram <- cartogram_dorling(sf_pcd_area, k=0.4, weight=\"record_count\",itermax = 1000,m_weight=0.2)\n# Calculate the area of the circles\nsizes <- st_area(dorling_cartogram) %>%\n  ntile(5)\n```\n:::\n\n\n\nThese can then be used to create a Typography only map by using the centroid locations of the circles (which are hidden), with the labels plotted but scaled by their associated shape size.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot using ggplot2\nggplot(dorling_cartogram) +\n  #scale_size_continuous(range = c(1, 10), guide = \"none\") +  # Adjust size\n  geom_sf_text(aes(label = pcd_area), size = sizes) +\n  coord_fixed() +\n  theme_minimal() +\n  theme(axis.text=element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.spacing = unit(0,\"mm\"),\n        plot.margin =  unit(rep(0,4),\"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}